import{_ as c,o as r,c as l,b as t,e as o,w as d,v as i,h as m,F as p,i as h,p as b,a as _}from"./index-0ba2a450.js";const v={data(){return{}},methods:{incorrect(e){var n=document.getElementById("snackbar");n.innerHTML=e,n.style.backgroundColor="red",n.className="show",setTimeout(function(){n.className=n.className.replace("show","")},3e3)},correct1(){var e=document.getElementById("snackbar");e.innerHTML="Correct",e.style.backgroundColor="green",e.className="show",setTimeout(function(){e.className=e.className.replace("show","")},3e3)},validate_one(){this.one.trim()=="add"&&this.two.trim()=="int a"&&this.three.trim()=="int b"?(this.correct1(),alert("Correct")):(this.incorrect("Try again"),alert("Incorrect, please try again"))}}},s=e=>(b("data-v-52aeb62d"),e=e(),_(),e),y=s(()=>t("header",{style:{padding:"20px"}},[t("h5",null,"HELP"),t("h1",null,"Passing Arguments to Functions")],-1)),g=s(()=>t("div",{id:"snackbar"},"Some text some message..",-1)),f={class:"flex-row"},w=h(`<div style="width:50%;" data-v-52aeb62d><h2 data-v-52aeb62d>Theory</h2><div class="outbox" data-v-52aeb62d><pre data-v-52aeb62d>public int addNumbers(int a, int b) {
    int sum = a + b;
    return sum;
}
<span id="comment" data-v-52aeb62d>// call the function with arguments x and y</span>
int x = 5;
int y = 10;
int z = addNumbers(x, y); 
System.out.println(z); 

<span id="comment" data-v-52aeb62d>// output: 15</span>
                
              </pre></div><div class="content" data-v-52aeb62d><p data-v-52aeb62d> You can pass arguments to functions or methods by specifying their types and names inside the parentheses of the function definition. </p></div></div>`,1),x={style:{width:"50%"}},N=s(()=>t("h2",null,"Try it yourself",-1)),T={class:"outbox"},k=s(()=>t("p",null,"a = a+b;",-1)),C=s(()=>t("br",null,null,-1)),V=s(()=>t("br",null,null,-1)),I=s(()=>t("span",{id:"comment"},"//Add a function named 'add' that takes two integer arguments in call by value and adds it to the first argument",-1)),S=s(()=>t("br",null,null,-1)),B={id:"buttons",class:"relative"},F={key:0,class:"navitem"};function A(e,n,E,$,H,u){return r(),l(p,null,[y,g,t("main",null,[t("div",f,[w,t("div",x,[N,t("div",T,[o(" public void "),d(t("input",{type:"text","onUpdate:modelValue":n[0]||(n[0]=a=>e.one=a)},null,512),[[i,e.one]]),o("("),d(t("input",{type:"text","onUpdate:modelValue":n[1]||(n[1]=a=>e.two=a)},null,512),[[i,e.two]]),o(", "),d(t("input",{type:"text","onUpdate:modelValue":n[2]||(n[2]=a=>e.three=a)},null,512),[[i,e.three]]),o("){ Â  "),k,o(" } "),C,V,I,S]),t("button",{class:"button-9",onClick:n[3]||(n[3]=a=>u.validate_one())},"Validate")])]),t("footer",null,[t("div",B,[e.currentStep===1?(r(),l("button",F,"Next")):m("",!0)])])])],64)}const M=c(v,[["render",A],["__scopeId","data-v-52aeb62d"]]);export{M as default};
